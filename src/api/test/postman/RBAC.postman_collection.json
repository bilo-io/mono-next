{
	"info": {
		"_postman_id": "e23ffdf1-08a4-41db-862b-5387d1b2d434",
		"name": "RBAC",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "810247"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('email');",
									"        pm.expect(item).to.have.property('password');",
									"        pm.expect(item).to.have.property('name');",
									"        pm.expect(item).to.have.property('createdAt');",
									"        pm.expect(item).to.have.property('updatedAt');",
									"    });",
									"",
									"    const firstItem = responseData?.data[0];",
									"    pm.environment.set(\"userId\", firstItem.id);",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    responseData.data.forEach(function(user) {",
									"        pm.expect(user.email).to.be.a('string').and.to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Meta object is present and contains expected properties\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.meta).to.exist;",
									"    pm.expect(responseData.meta.total).to.exist;",
									"    pm.expect(responseData.meta.page).to.exist;",
									"    pm.expect(responseData.meta.limit).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/users?page={{PAGE}}&limit={{LIMIT}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "{{PAGE}}"
								},
								{
									"key": "limit",
									"value": "{{LIMIT}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/users/{{userId}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.email).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.password).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.updatedAt).to.exist.and.to.be.a('string');",
									"",
									"  pm.environment.set('userId', responseData.id);",
									"});",
									"",
									"",
									"pm.test(\"Email is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Password is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Postman Tester\",\n    \"email\": \"testing@postman.com\",\n    \"password\": \"12345\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_BASE_URL}}/users/create",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"users",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Postman Tester Name Update\",\n    \"email\": \"testing+update@postman.com\",\n    \"password\": \"56789\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_BASE_URL}}/users/{{userId}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/users/{{userId}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the schema for each role object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    const firstItem = responseData[0]",
									"    pm.environment.set(\"roleId\", firstItem.id);",
									"    ",
									"    responseData.forEach(function(role) {",
									"        pm.expect(role).to.be.an('object');",
									"        pm.expect(role.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"id should be a non-empty string\");",
									"        pm.expect(role.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"name should be a non-empty string\");",
									"        // pm.expect(role.level).to.be.null.or.undefined;",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/roles?page={{PAGE}}&limit={{LIMIT}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"roles"
							],
							"query": [
								{
									"key": "page",
									"value": "{{PAGE}}"
								},
								{
									"key": "limit",
									"value": "{{LIMIT}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Role by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/roles/{{roleId}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"roles",
								"{{roleId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.updatedAt).to.exist.and.to.be.a('string');",
									"",
									"  pm.environment.set('roleId', responseData.id);",
									"});",
									"",
									"",
									"pm.test(\"Email is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Password is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"TestRole\",\n    \"permissionIds\": [\n        \"d3d84489-ad0f-48ab-9a60-51b3ee2b2e5d\",\n        \"0e23b2e4-c20c-4fe7-ba3c-ae53a3d65357\"\n    ],\n    \"level\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_BASE_URL}}/roles/create",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"roles",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Postman Tester Name Update\",\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_BASE_URL}}/roles/{{roleId}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"roles",
								"{{roleId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/roles/{{roleId}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"roles",
								"{{roleId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Permissions",
			"item": [
				{
					"name": "Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id and name fields are present and non-empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  responseData.forEach(item => {",
									"    pm.expect(item.id).to.exist.and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
									"    pm.expect(item.name).to.exist.and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"",
									"  if (responseData.length > 0) {",
									"    pm.environment.set('permissionId', responseData[0].id)",
									"  }",
									"});",
									"",
									"",
									"pm.test(\"Id is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.id).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/permissions",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Permission by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/permissions/{{permissionId}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"permissions",
								"{{permissionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.updatedAt).to.exist.and.to.be.a('string');",
									"",
									"  pm.environment.set('permissionId', responseData.id);",
									"});",
									"",
									"",
									"pm.test(\"Email is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Password is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"read:users\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_BASE_URL}}/permissions/create",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"permissions",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Permission",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"read:users\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_BASE_URL}}/permissions/{{permissionId}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"permissions",
								"{{permissionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Permission",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/permissions/{{permissionId}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"permissions",
								"{{permissionId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}